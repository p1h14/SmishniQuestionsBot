import logging
import os
import random
import asyncio
from dotenv import load_dotenv
from collections import defaultdict

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –î–∞–Ω—ñ –≥—Ä–∏
players = {}
group_id = None
questions = []
answers = defaultdict(list)
votes = defaultdict(lambda: defaultdict(int))
scores = defaultdict(int)
current_question = None
game_running = False

def load_questions():
    global questions
    with open("questions.txt", "r", encoding="utf-8") as f:
        questions = [line.strip() for line in f if line.strip()]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global group_id, players, scores, game_running
    if game_running:
        await update.message.reply_text("‚õî –ì—Ä–∞ –≤–∂–µ —Ç—Ä–∏–≤–∞—î.")
        return

    group_id = update.effective_chat.id
    players.clear()
    scores.clear()
    game_running = True

    keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data="join")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=group_id,
        text="üéâ <b>–ì—Ä–∞ \"–°–º—ñ—à–Ω—ñ –ü–∏—Ç–∞–Ω–Ω—è\" –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!</b>\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user

    if user.id not in players:
        players[user.id] = user.first_name
        await query.answer("–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!")
    else:
        await query.answer("–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ üòâ")

    player_list = "\n".join([f"‚Ä¢ {name}" for name in players.values()])
    await query.edit_message_text(
        text=f"‚úÖ –£—á–∞—Å–Ω–∏–∫–∏ –≥—Ä–∏:\n{player_list}\n\n–°–∫–æ—Ä–æ –ø–æ—á–Ω–µ–º–æ..."
    )

    if len(players) >= 2:
        await asyncio.sleep(5)
        await start_round(context)

async def start_round(context: ContextTypes.DEFAULT_TYPE):
    global current_question, answers
    answers.clear()
    await context.bot.send_message(chat_id=group_id, text="üîî –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥!")

    for i in range(5):
        current_question = random.choice(questions)
        await context.bot.send_message(chat_id=group_id, text=f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {i+1}: {current_question}")
        for user_id in players.keys():
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:\n\n{current_question}"
                )
            except Exception as e:
                logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é {user_id}: {e}")

        await asyncio.sleep(20)

    await post_answers(context)

async def post_answers(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=group_id, text="üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ:")

    q = current_question
    anon_answers = answers.get(q, [])
    keyboard = []

    for i, ans in enumerate(anon_answers):
        keyboard.append([InlineKeyboardButton(f"–ì–æ–ª–æ—Å –∑–∞ {i+1}", callback_data=f"vote_{i}")])

    text = f"‚ùì {q}\n\n" + "\n".join([f"{i+1}. {a}" for i, a in enumerate(anon_answers)])
    await context.bot.send_message(chat_id=group_id, text=text, reply_markup=InlineKeyboardMarkup(keyboard))

    await asyncio.sleep(20)
    await show_results(context)

async def show_results(context: ContextTypes.DEFAULT_TYPE):
    global scores

    vote_counts = {i: 0 for i in range(len(answers[current_question]))}
    for voter in votes[current_question]:
        idx = votes[current_question][voter]
        vote_counts[idx] += 1

    msg = "üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:\n"
    for i, count in vote_counts.items():
        msg += f"–í–∞—Ä—ñ–∞–Ω—Ç {i+1}: {count} –≥–æ–ª–æ—Å(—ñ–≤)\n"
        scores[i] += count

    await context.bot.send_message(chat_id=group_id, text=msg)
    await context.bot.send_message(chat_id=group_id, text="–ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–Ω–∞ –ø–∏—Å–∞—Ç–∏ /stats –∞–±–æ /stopgame.")

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    if not game_running or current_question is None:
        return

    answers[current_question].append(update.message.text)
    await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞!")

async def handle_vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    data = query.data

    if not data.startswith("vote_"):
        return

    index = int(data.split("_")[1])
    votes[current_question][user.id] = index
    await query.answer("–ì–æ–ª–æ—Å –ø—Ä–∏–π–Ω—è—Ç–æ!")

async def stop_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_running
    game_running = False
    await update.message.reply_text("üõë –ì—Ä—É –∑—É–ø–∏–Ω–µ–Ω–æ.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not scores:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —â–µ –Ω–µ–º–∞—î.")
        return

    msg = "üìä –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    for i, score in scores.items():
        msg += f"–í–∞—Ä—ñ–∞–Ω—Ç {i+1}: {score} –±–∞–ª—ñ–≤\n"

    await update.message.reply_text(msg)

def main():
    load_questions()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopgame", stop_game))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(join, pattern="^join$"))
    app.add_handler(CallbackQueryHandler(handle_vote, pattern="^vote_"))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT, handle_answer))

    app.run_polling()

if __name__ == "__main__":
    main()
