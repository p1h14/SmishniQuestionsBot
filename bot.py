import os
import random
import logging
import asyncio
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

players = {}
group_id = None
questions = []
answers = {}
used_questions = set()
scores = {}
game_started = False
game_timer = None

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∏—Ç–∞–Ω—å
def load_questions():
    global questions
    with open("questions.txt", "r", encoding="utf-8") as f:
        questions = [line.strip() for line in f if line.strip()]

# –°—Ç–∞—Ä—Ç –≥—Ä–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global group_id, players, scores, game_started, game_timer

    if game_started:
        await update.message.reply_text("–ì—Ä–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    players.clear()
    scores.clear()
    group_id = update.effective_chat.id
    game_started = True

    keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data="join")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=group_id,
        text="üéâ –ì—Ä–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! –ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è.",
        reply_markup=reply_markup
    )

    # –ß–µ–∫–∞—î–º–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤
    await asyncio.sleep(30)

    if len(players) >= 2:
        await start_round(context)
    else:
        await context.bot.send_message(chat_id=group_id, text="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –≥—Ä–∞–≤—Ü—ñ–≤ üò¢")
        game_started = False

# –ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è
async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global players

    query = update.callback_query
    user = query.from_user

    if user.id not in players:
        players[user.id] = user.first_name
        await query.answer("–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è!")
    else:
        await query.answer("–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ üòâ")

    player_list = "\n".join([f"‚Ä¢ {name}" for name in players.values()])
    await query.edit_message_text(
        text=f"‚úÖ –£—á–∞—Å–Ω–∏–∫–∏ –≥—Ä–∏:\n{player_list}\n(–°—Ç–∞—Ä—Ç –∑–∞ 30 —Å–µ–∫...)"
    )

# –ü–æ—á–∞—Ç–æ–∫ —Ä–∞—É–Ω–¥—É
async def start_round(context: ContextTypes.DEFAULT_TYPE):
    global used_questions, questions, group_id, answers

    selected = []
    answers.clear()

    while len(selected) < 5:
        q = random.choice(questions)
        if q not in used_questions:
            selected.append(q)
            used_questions.add(q)
        if len(used_questions) == len(questions):
            used_questions.clear()

    for i, q in enumerate(selected):
        await context.bot.send_message(chat_id=group_id, text=f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {i+1}: {q}")
        for user_id in players:
            await context.bot.send_message(chat_id=user_id, text=f"–ü–∏—Ç–∞–Ω–Ω—è:\n{q}")
        await asyncio.sleep(20)

    await context.bot.send_message(chat_id=group_id, text="üìù –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–≥–ª—è–¥ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—ñ–∑–Ω—ñ—à–µ.")

# –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = update.message.text
    if not text:
        return

    question = "–æ—Å—Ç–∞–Ω–Ω—è"  # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è ‚Üí –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    if question not in answers:
        answers[question] = []
    answers[question].append(f"{user.first_name}: {text}")
    await context.bot.send_message(chat_id=user.id, text="‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–±–µ—Ä–µ–∂–µ–Ω–∞!")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    load_questions()

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(join))
    app.add_handler(MessageHandler(filters.PRIVATE & filters.TEXT, handle_private))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
