import logging
import random
import time
import threading
from dotenv import load_dotenv
import os

from telegram import (
    Bot,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler,
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

bot = Bot(token=TOKEN)
updater = Updater(token=TOKEN, use_context=True)
dispatcher = updater.dispatcher

# –ó–º—ñ–Ω–Ω—ñ –≥—Ä–∏
players = {}
group_id = None
questions = []
answers = {}
current_question_index = 0
votes = {}
scores = {}

def load_questions():
    global questions
    with open("questions.txt", "r", encoding="utf-8") as f:
        questions = [line.strip() for line in f if line.strip()]

def start(update: Update, context: CallbackContext):
    global group_id
    group_id = update.effective_chat.id
    players.clear()
    scores.clear()

    keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data="join")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    context.bot.send_message(
        chat_id=group_id,
        text="üéâ <b>–ì—Ä–∞ \"–°–º—ñ—à–Ω—ñ –ü–∏—Ç–∞–Ω–Ω—è\" –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!</b>\n–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

def join(update: Update, context: CallbackContext):
    query = update.callback_query
    user = query.from_user

    if user.id not in players:
        players[user.id] = user.first_name
        query.answer("–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!")
    else:
        query.answer("–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ üòâ")

    player_list = "\n".join([f"‚Ä¢ {name}" for name in players.values()])
    query.edit_message_text(
        text=f"‚úÖ –£—á–∞—Å–Ω–∏–∫–∏ –≥—Ä–∏:\n{player_list}\n\n–°–∫–æ—Ä–æ –ø–æ—á–Ω–µ–º–æ..."
    )

    # –Ø–∫—â–æ 2+ –≥—Ä–∞–≤—Ü—ñ–≤, –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É
    if len(players) >= 2:
        threading.Timer(5, start_round, [context]).start()

def start_round(context: CallbackContext):
    global current_question_index, answers, votes
    answers.clear()
    votes.clear()
    current_question_index = 0

    context.bot.send_message(chat_id=group_id, text="üîî –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥!")

    for i in range(5):
        q = questions[current_question_index]
        context.bot.send_message(chat_id=group_id, text=f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {i+1}: {q}")
        for user_id in players.keys():
            context.bot.send_message(
                chat_id=user_id,
                text=f"‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:\n\n{q}"
            )
        time.sleep(20)
        current_question_index += 1

    post_answers(context)

def post_answers(context: CallbackContext):
    context.bot.send_message(chat_id=group_id, text="üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—ñ:")
    question_number = 1
    for q in questions[:5]:
        context.bot.send_message(chat_id=group_id, text=f"‚ùì {q}")
        anon_answers = [f"üìù {a}" for a in answers.get(q, [])]
        context.bot.send_message(chat_id=group_id, text="\n".join(anon_answers))
        question_number += 1

    # –¢—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
    # –ê–±–æ –ø—Ä–æ—Å—Ç–µ –ø—ñ–¥—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ö—Ç–æ –Ω–∞–π–∫—É–º–µ–¥–Ω—ñ—à–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ (—Ä—É—á–Ω–µ –∞–±–æ —á–µ—Ä–µ–∑ /vote)

    context.bot.send_message(chat_id=group_id, text="‚úÖ –ì—Ä—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–¥–µ–º–æ –≤–µ—Ä—Å—ñ—è).")

def handle_private_message(update: Update, context: CallbackContext):
    user = update.message.from_user
    text = update.message.text
    if current_question_index == 0:
        return

    question = questions[current_question_index - 1]
    if question not in answers:
        answers[question] = []

    if text:
        answers[question].append(text)
        context.bot.send_message(chat_id=user.id, text="‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞!")

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CallbackQueryHandler(join))
dispatcher.add_handler(MessageHandler(Filters.private & Filters.text, handle_private_message))

if __name__ == "__main__":
    load_questions()
    updater.start_polling()
    updater.idle()
