import os
import random
import asyncio
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –î–∞–Ω—ñ –≥—Ä–∏
group_id = None
players = {}
scores = {}
questions = []
used_questions = set()
current_round_questions = []
current_answers = {}
vote_stage = False
votes = {}
game_running = False
start_timer = None

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∑ —Ñ–∞–π–ª—É
def load_questions():
    global questions
    with open("questions.txt", "r", encoding="utf-8") as f:
        questions = [line.strip() for line in f if line.strip()]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global group_id, players, game_running, start_timer
    if game_running:
        await update.message.reply_text("‚ö†Ô∏è –ì—Ä–∞ –≤–∂–µ –π–¥–µ!")
        return

    players.clear()
    scores.clear()
    group_id = update.effective_chat.id
    game_running = True

    keyboard = [[InlineKeyboardButton("üéÆ –ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å", callback_data="join")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=group_id,
        text="üéâ <b>–ì—Ä–∞ –ø–æ—á–∞–ª–∞—Å—å!</b> –ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è!",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å"
async def join(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global start_timer
    query = update.callback_query
    user = query.from_user

    if user.id not in players:
        players[user.id] = user.first_name
        scores[user.id] = 0
        await query.answer("üéâ –¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è!")
    else:
        await query.answer("‚úÖ –¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ!")

    player_list = "\n".join([f"‚Ä¢ {name}" for name in players.values()])
    await query.edit_message_text(f"‚úÖ –ì—Ä–∞–≤—Ü—ñ:\n{player_list}\n\n–û—á—ñ–∫—É—î–º–æ —â–µ...")

    if len(players) == 2 and not start_timer:
        start_timer = asyncio.create_task(start_game_in_30_sec(context))

# –ó–∞–ø—É—Å–∫ –≥—Ä–∏ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
async def start_game_in_30_sec(context):
    await asyncio.sleep(30)
    await start_round(context)

# –ó–∞–ø—É—Å–∫ —Ä–∞—É–Ω–¥—É
async def start_round(context):
    global current_round_questions, current_answers, vote_stage
    current_answers.clear()
    vote_stage = False
    current_round_questions = get_random_questions(5)

    await context.bot.send_message(chat_id=group_id, text="üö® –†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ —Ä–∞—É–Ω–¥!")
    for i, q in enumerate(current_round_questions):
        await context.bot.send_message(chat_id=group_id, text=f"‚ùì –ü–∏—Ç–∞–Ω–Ω—è {i+1}: {q}")
        for player_id in players:
            await context.bot.send_message(chat_id=player_id, text=f"‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è:\n{q}")
        await asyncio.sleep(20)

    await post_answers(context)

# –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
async def post_answers(context):
    global vote_stage, votes
    vote_stage = True
    votes.clear()

    await context.bot.send_message(chat_id=group_id, text="üó≥ –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –ø–æ—á–∞–ª–æ—Å—å!")
    for q in current_round_questions:
        q_answers = current_answers.get(q, [])
        buttons = []
        for i, ans in enumerate(q_answers):
            buttons.append([InlineKeyboardButton(ans, callback_data=f"vote_{q}_{i}")])
        if buttons:
            await context.bot.send_message(
                chat_id=group_id,
                text=f"‚ùì {q}",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

    await asyncio.sleep(30)
    await end_round(context)

# –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–∞—É–Ω–¥
async def end_round(context):
    global vote_stage, used_questions
    vote_stage = False
    used_questions.update(current_round_questions)
    await context.bot.send_message(chat_id=group_id, text="üèÅ –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    score_table = "\n".join([f"{players[p]}: {scores[p]} –±–∞–ª—ñ–≤" for p in players])
    await context.bot.send_message(chat_id=group_id, text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{score_table}")

# –û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—ñ–≤
used_all_once = False

def get_random_questions(n):
    global used_questions, used_all_once
    pool = [q for q in questions if q not in used_questions]
    if len(pool) < n:
        used_questions.clear()
        used_all_once = True
        pool = questions[:]
    return random.sample(pool, n)

# –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –ø—Ä–∏–≤–∞—Ç
async def handle_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not game_running or vote_stage:
        return
    user = update.message.from_user
    text = update.message.text
    if user.id not in players:
        return
    last_q = current_round_questions[len(current_answers)]
    if last_q not in current_answers:
        current_answers[last_q] = []
    current_answers[last_q].append(text)
    await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞!")

# –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
async def vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not vote_stage:
        return
    query = update.callback_query
    voter = query.from_user.id
    data = query.data.split("_")
    if len(data) < 3:
        return
    _, question, index = data
    try:
        answer = current_answers[question][int(index)]
        for pid in players:
            if pid != voter:
                scores[pid] += 1
        await query.answer("üó≥ –ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ!")
        await query.edit_message_reply_markup(None)
    except:
        await query.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è")

# –ó—É–ø–∏–Ω–∫–∞ –≥—Ä–∏
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global game_running
    game_running = False
    await update.message.reply_text("‚õîÔ∏è –ì—Ä—É –∑—É–ø–∏–Ω–µ–Ω–æ.")

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    load_questions()
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stopgame", stop))
    app.add_handler(CallbackQueryHandler(join, pattern="^join$"))
    app.add_handler(CallbackQueryHandler(vote, pattern="^vote_"))
    app.add_handler(MessageHandler(filters.PRIVATE & filters.TEXT, handle_private))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    app.run_polling()
